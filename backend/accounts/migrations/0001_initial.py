# Generated by Django 5.2 on 2025-05-12 21:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nom', models.CharField(max_length=15)),
                ('prenom', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('sexe', models.CharField(choices=[('Homme', 'Homme'), ('Femme', 'Femme')], max_length=5)),
                ('date_de_naissance', models.DateField()),
                ('avatar', models.ImageField(upload_to='photos_chercheurs/')),
                ('role', models.CharField(choices=[('chercheur', 'Chercheur'), ('proprietaire', 'Proprietaire')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnnonceColcChercheur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gouvernorat', models.CharField(max_length=20)),
                ('delegation', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=15)),
                ('description', models.TextField(null=True)),
                ('date_pub_annonce', models.DateField()),
                ('type_annonce', models.CharField(choices=[('Annonce Propriétaire', 'Annonce Proprietaire'), ('Annonce Chercheur Chambre', 'Annonce Chercheur Chambre'), ('Annonce Proposeur Chambre', 'Annonce Proposeur Chambre')], max_length=30)),
                ('budget_max', models.DecimalField(decimal_places=2, max_digits=10)),
                ('occupation', models.CharField(choices=[('Etudiant(e)', 'Etudiant'), ('Retraité(e)', 'Retraite'), ('Salarié(e)', 'Salari'), ('Chômeur(e)', 'Chomeur')], max_length=15)),
                ('age', models.PositiveIntegerField()),
                ('date_habite', models.DateField()),
                ('preferences', models.CharField(choices=[('Musique', 'Musique'), ('Sport', 'Sport'), ('Lecture', 'Lecture'), ('Cuisine', 'Cuisine'), ('Cinema', 'Cinema'), ('Video games', 'Video Games'), ('Casanier', 'Casanier'), ('Aventurier', 'Aventurier'), ('Artiste', 'Artiste'), ('Extraverti', 'Extraverti'), ('Introverti', 'Introverti'), ('Communicatif', 'Communicatif'), ('Solitaire', 'Solitaire'), ('Calme', 'Calme'), ('Sérieux', 'Sérieux'), ('Amical', 'Amical')], max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annonces_colocateur_chercheur', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnnonceColocProposeur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gouvernorat', models.CharField(max_length=20)),
                ('delegation', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=15)),
                ('description', models.TextField(null=True)),
                ('date_pub_annonce', models.DateField()),
                ('type_annonce', models.CharField(choices=[('Annonce Propriétaire', 'Annonce Proprietaire'), ('Annonce Chercheur Chambre', 'Annonce Chercheur Chambre'), ('Annonce Proposeur Chambre', 'Annonce Proposeur Chambre')], max_length=30)),
                ('photo_de_chambre', models.ImageField(upload_to='photos_logements/')),
                ('loyer', models.DecimalField(decimal_places=2, max_digits=10)),
                ('caution', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_de_disponibilite', models.DateField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annonces_colocateur_proposeur', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnnonceProprietaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gouvernorat', models.CharField(max_length=20)),
                ('delegation', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=15)),
                ('description', models.TextField(null=True)),
                ('date_pub_annonce', models.DateField()),
                ('type_annonce', models.CharField(choices=[('Annonce Propriétaire', 'Annonce Proprietaire'), ('Annonce Chercheur Chambre', 'Annonce Chercheur Chambre'), ('Annonce Proposeur Chambre', 'Annonce Proposeur Chambre')], max_length=30)),
                ('type_de_logement', models.CharField(choices=[('Studio', 'Studio'), ('Appartement', 'Appartement'), ('Coliving', 'Coliving'), ('Chambre individuelle', 'Chambre'), ('Etage de villa', 'Etage Villa'), ('Résidence', 'Residence')], max_length=30)),
                ('nombre_pieces', models.PositiveIntegerField()),
                ('superficie', models.PositiveIntegerField(help_text='en m²')),
                ('photo_de_maison', models.ImageField(upload_to='photos_logements/')),
                ('commodites', models.CharField(choices=[('Wifi', 'Wifi'), ('Parking', 'Parking'), ('Climatisation', 'Climatisation'), ('Ascenseur', 'Ascenseur'), ('Jardin', 'Jardin'), ('Garage', 'Garage'), ('Machine à laver', 'Machine A Laver'), ('Accessibilité handicapé', 'Accessibilite Handicape'), ('Balcon', 'Balcon')], max_length=50)),
                ('regles', models.CharField(choices=[('Fille uniquement', 'Fille Uniquement'), ('Garçon uniquement', 'Garcon Uniquement'), ('Fumeur accepté', 'Fumeur Accepte'), ('Non fumeur accepté', 'Non Fumeur Accepte'), ('Animaux acceptés', 'Animaux Acceptes'), ('Animaux non acceptés', 'Animaux Non Acceptes')], max_length=50)),
                ('date_de_disponibilite', models.DateField()),
                ('loyer', models.DecimalField(decimal_places=2, max_digits=10)),
                ('caution', models.DecimalField(decimal_places=2, max_digits=10)),
                ('meuble', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=5)),
                ('colocataire_déjà_existant', models.PositiveIntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annonces_proprietaire', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FomulaireTestCompatibilite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('horaire_de_reveil', models.CharField(choices=[('Tot', 'Tot'), ('Normal', 'Normal'), ('Tard', 'Tard')])),
                ('horaire_de_coucher', models.CharField(choices=[('Tot', 'Tot'), ('Normal', 'Normal'), ('Tard', 'Tard')])),
                ('fréquence_sortie_nocturne', models.CharField(choices=[('Rarement', 'Rarement'), ('Occasionnelement', 'Occasionnelemnt'), ('Souvent', 'Souvent'), ('Jamais', 'Jamais')])),
                ('fréquence_invitation_amis', models.CharField(choices=[('Rarement', 'Rarement'), ('Occasionnelement', 'Occasionnelemnt'), ('Souvent', 'Souvent'), ('Jamais', 'Jamais')])),
                ('fréquence_consommation_alcool', models.CharField(choices=[('Rarement', 'Rarement'), ('Occasionnelement', 'Occasionnelemnt'), ('Souvent', 'Souvent'), ('Jamais', 'Jamais')])),
                ('fréquence_de_menage', models.CharField(choices=[('Rarement', 'Rarement'), ('Quotidien', 'Quotidien'), ('Hebdomadaire', 'Hebdomadaire')])),
                ('niveau_exigence_proprote', models.CharField(choices=[('Peu important', 'Peu Important'), ('Important', 'Important'), ('Très important', 'Très Important')])),
                ('attitude_partage_taches', models.CharField(choices=[('Flexible', 'Flexible'), ('Préfére un planning', 'Prefere Un Planning'), ('Indifferement', 'Indifferement')])),
                ('preference_niveau_sonore', models.CharField(choices=[('Trés calme', 'Tres Calme'), ('Calme', 'Calme'), ('Ambiance vivente', 'Ambiance Vivante')])),
                ('sensibilite_bruit', models.CharField(choices=[('Peu important', 'Peu Important'), ('Important', 'Important'), ('Très important', 'Très Important')])),
                ('preferences', models.CharField(choices=[('Musique', 'Musique'), ('Sport', 'Sport'), ('Lecture', 'Lecture'), ('Cuisine', 'Cuisine'), ('Cinema', 'Cinema'), ('Video games', 'Video Games'), ('Casanier', 'Casanier'), ('Aventurier', 'Aventurier'), ('Artiste', 'Artiste'), ('Extraverti', 'Extraverti'), ('Introverti', 'Introverti'), ('Communicatif', 'Communicatif'), ('Solitaire', 'Solitaire'), ('Calme', 'Calme'), ('Sérieux', 'Sérieux'), ('Amical', 'Amical')])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formulaire_test_compatibilé', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contenu', models.TextField()),
                ('date_envoi', models.DateTimeField(auto_now_add=True)),
                ('lu', models.BooleanField(default=False)),
                ('destinataire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages_recus', to=settings.AUTH_USER_MODEL)),
                ('expediteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages_envoyes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('link', models.URLField(blank=True, null=True)),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notification_type', models.CharField(choices=[('NEW_HOUSING', 'Nouvelle annonce'), ('NEW_MATCH', 'Nouveau match'), ('MESSAGE', 'Nouveau message')], max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Favoris',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoris', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='Matching',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField()),
                ('compatibilite_description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchings_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchings_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user1', 'user2')},
            },
        ),
    ]
